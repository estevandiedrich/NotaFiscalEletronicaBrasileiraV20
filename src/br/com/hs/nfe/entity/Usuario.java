package br.com.hs.nfe.entity;

// Generated 13/06/2008 11:47:43 by Hibernate Tools 3.2.2.GA

import java.io.IOException;
import java.util.List;

import br.com.hs.nfe.util.Base64Utils;
//import br.inf.gati.nfe.persistencia.dao.UsuarioEstabelecimentoDAO;

/**
 * Usuario generated by hbm2java
 */
public class Usuario implements java.io.Serializable {
	
	private static final long serialVersionUID = 8377610615198475567L;
	
	public static final int TIPO_USUARIO_ROOT = 0;
	public static final int TIPO_USUARIO_ADMINISTRADOR = 1;
	public static final int TIPO_USUARIO_USUARIO = 2;
	
	private int codUsuario;
	private String nome;
	private String usuario;
	private String senha;
	private int codTpUsuario;
	
	public Usuario () {
	}
	
	public Usuario (String nome, String usuario, String senha, int codTpUsuario) {
		this.nome = nome;
		this.usuario = usuario;
		this.senha = senha;
		this.codTpUsuario = codTpUsuario;
	}
	
	public int getCodUsuario() {
		return this.codUsuario;
	}
	
	public void setCodUsuario(int codUsuario) {
		this.codUsuario = codUsuario;
	}
	
	public String getNome() {
		return this.nome;
	}
	
	public void setNome(String nome) {
		this.nome = nome;
	}
	
	public String getUsuario() {
		return this.usuario;
	}
	
	public void setUsuario(String usuario) {
		this.usuario = usuario;
	}
	
	public String getSenha() {
		return this.senha;
	}
	
	public void setSenha(String senha) {
		this.senha = senha;
	}
	
	public String getSenhaEncrypted() {
		if (this.senha == null) {
			return null;
		}
		return Base64Utils.encode(this.senha);
	}
	
	public void setSenhaEncrypted(String senha) throws IOException {
		if (senha == null) {
			this.senha = null;
		} else {
			this.senha = Base64Utils.decode(senha);
		}
	}
	
	public int getCodTpUsuario() {
		return this.codTpUsuario;
	}
	
	/**
	 * Código do tipo de usuário <br>
	 * 
	 * @param codTpUsuario
	 */
	public void setCodTpUsuario(int codTpUsuario) {
		this.codTpUsuario = codTpUsuario;
	}
	
	public String getTpUsuario() {
		switch (codTpUsuario) {
			case TIPO_USUARIO_ROOT:
				return "ROOT";
			case TIPO_USUARIO_ADMINISTRADOR:
				return "Administrador";
			default:
				return "Usuário";
		}
	}
}
